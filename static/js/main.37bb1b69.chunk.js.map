{"version":3,"sources":["components/Marker.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Marker","text","onClick","style","bg","Map","useState","selected_facility","set_selected_facility","map_ref","useRef","maps_ref","reset_bounds","facilities","length","new_bounds","current","LatLngBounds","i","extend","lat","lng","fitBounds","useEffect","equipments","fit_bounds_to_show_equipments","groups","reduce","previous","concat","get_all_markers_from_selected_facility","bootstrapURLKeys","key","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","map","maps","e","console","log","facility","className","stopPropagation","name","id","group","equipment","App","Navbar","variant","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37bb1b69.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Marker({ text, onClick, bg}) {\n  const style = {\n    'tabIndex': '0',\n    'backgroundColor': bg,\n    'color': 'white',\n    'height': '2.5rem',\n    'width': '2.5rem',\n    'minWidth': 'max-content',\n    'borderRadius': '50%',\n    'display': 'flex',\n    'alignItems': 'center',\n    'justifyContent': 'center',\n  };\n\n  return(\n    <div \n      onClick={onClick}\n      style={style}\n    >\n      {text}\n    </div>\n  )\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport Marker from './Marker';\nimport { facilities } from '../utility/facilities';\n//import { divisions_list } from '../utility/police_divisions';\n//import build_crimes_query from '../utility/build_crimes_query';\n//import { useFetch } from '../utility/useFetch';\n\nexport default function Map() {\n  const defaultCenter = { lat: 43.76681, lng: -79.41636 }; \n  const defaultZoom = 10;\n  const [\n    selected_facility, \n    set_selected_facility\n  ] = useState({});\n  const map_ref = useRef();\n  const maps_ref = useRef();\n  //const [bounds, set_bounds] = useState({});\n\n//  const [queryFilter, setQueryFilter] = useState({ 'reportedyear': '2020' });\n//  const crimes_query = build_crimes_query(queryFilter);\n//  const { data: points, loading } = useFetch(crimes_query);\n  const reset_bounds = () => {\n    if (!facilities.length) return;\n\n    const new_bounds = new maps_ref.current.LatLngBounds();\n\n    for (let i in facilities) {\n      new_bounds.extend({ lat:  facilities[i].lat, lng: facilities[i].lng });\n    }\n   // set_bounds(new_bounds);\n    map_ref.current.fitBounds(new_bounds);\n  }\n\n  const fit_bounds_to_show_equipments = ( equipments ) => {\n    if (!equipments?.length) return;\n\n    const new_bounds = new maps_ref.current.LatLngBounds();\n\n    for (let i in equipments) {\n      new_bounds.extend({ lat: equipments[i].lat, lng: equipments[i].lng })\n    }\n\n    map_ref.current.fitBounds(new_bounds);\n  }\n\n  // Returns all nested equipments from the facility=>group tree\n  const get_all_markers_from_selected_facility = ( ) => {\n    if (!selected_facility.groups) return;\n\n    return selected_facility.groups.reduce(\n      (previous, current) => {\n        previous = previous.equipments ?? previous;\n\n        return previous.concat(current.equipments);\n      }\n    );\n  }\n\n  useEffect(()=>{\n    fit_bounds_to_show_equipments(get_all_markers_from_selected_facility());\n  },[selected_facility]);\n\n  return(\n    <GoogleMapReact \n      bootstrapURLKeys={{ key: 'AIzaSyCoMeZ8bHHD1zQIFSslht_znET2EEyTK0s' }}\n      defaultCenter={defaultCenter}\n      defaultZoom={defaultZoom}\n      yesIWantToUseGoogleMapApiInternals\n      onGoogleApiLoaded={({ map, maps }) => {\n        map_ref.current = map;\n        maps_ref.current = maps;\n        reset_bounds();\n      }}\n      onClick={(e) => {\n        console.log('mapclick\\n','lat: '+e.lat, 'lng :'+e.lng)\n        set_selected_facility([]); \n        reset_bounds();\n      }}\n    >\n      {\n        // ** police crimes\n        //!loading && points.features.length &&\n        //  points.features.map(point => {\n        //    return(\n        //      <Marker\n        //        key={point.attributes.ObjectId}\n        //        lat={point.geometry.y}\n        //        lng={point.geometry.x}\n        //        text={point.attributes.MCI}\n        //      />\n        //    );\n        //  })\n        //\n        // ** police divisions\n        //divisions_list.map(division => {\n        //  return(\n        //    <Marker\n        //      key={division.name}\n        //      lat={division.lat}\n        //      lng={division.lng}\n        //      text={division.name}\n        //    />\n        //  ) \n        //})\n        // ** facilities\n        facilities.map(facility => {\n\n          //bounds.extend({ lat: facility.lat, lng: facility.lng });\n\n          return(\n            <Marker\n              className='mapMarker'\n              onClick={(e)=>{\n                e.stopPropagation();\n                set_selected_facility(facility)\n                //set_bounds(new maps_ref.current.LatLngBounds());\n              }}\n              key={facility.id}\n              lat={facility.lat}\n              lng={facility.lng}\n              text={facility.name}\n              bg='rgb(50,50,50)'\n            />\n          ) \n        })\n      }\n      {\n        selected_facility.groups?.map( group => {\n          if (!group.equipments.length) return null;\n\n          const equipment_markers = group.equipments.map( equipment => {\n            //bounds.extend({ lat: equipment.lat, lng: equipment.lng });\n\n            return(\n              <Marker\n                key={equipment.id}\n                lat={equipment.lat}\n                lng={equipment.lng}\n                text={equipment.id}\n                bg='rgb(150,50,50)'\n              />\n            )\n          });\n\n          //map_ref.current.fitBounds(bounds);\n\n          return equipment_markers;\n        })\n      }\n    </GoogleMapReact>\n  );\n}\n\n","import React from 'react';\nimport Map from './components/Map';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nfunction App() {\n\n  return (\n    <div>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Navbar.Brand href=\"#home\">Cluster Playground</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n        <Navbar.Collapse id=\"basic-navbar-nav\" className='justify-content-end'>\n          <Nav>\n            <Nav.Link \n              href=\"https://github.com/hungryvito/cluster_test\"\n            >github</Nav.Link>\n            <Nav.Link \n              href=\"https://github.com/google-map-react/google-map-react\"\n            >google-map-react</Nav.Link>\n            <Nav.Link \n              href=\"https://github.com/leighhalliday/use-supercluster\"\n            >use-supercluster</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Map/>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}